package ${package}.modules.${moduleName}.controller;

import ${package}.common.Result;
import ${package}.common.enums.Constants;
import ${package}.common.page.PageUtil;
import ${package}.common.utils.ConvertUtils;
import ${package}.common.utils.ExcelUtils;
import ${package}.modules.${moduleName}.dto.${className}Dto;
import ${package}.modules.${moduleName}.entity.${className}Entity;
import ${package}.modules.${moduleName}.excel.${className}Excel;
import ${package}.modules.${moduleName}.service.${className}Service;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import springfox.documentation.annotations.ApiIgnore;

import javax.servlet.http.HttpServletResponse;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;


/**
 * <p>
 * ${comments}
 * </p>
 *
 * @author: ${author}
 * @version: 1.0
 * @date: Created in ${YEAR}-${MONTH}-${DAY} ${HOUR}:${MINUTE}
 * @package:  ${package}.${moduleName}.entity
 * @modified: ${author}
 * @description: ${comments}
 * @copyright: Copyright (c) ${year}
 */
@RestController
@RequestMapping("/api/${moduleName}/${pathName}")
@Api(value = "${comments}", tags = "${comments}")
public class ${className}Controller {
    @Autowired
    private ${className}Service ${classname}Service;

    @GetMapping("/page")
    @ApiOperation(value = "分页查询", notes = "分页查询")
    @ApiImplicitParams({
            @ApiImplicitParam(name = Constants.PAGE_NO, value = "分页参数", paramType = "query", dataType = "int"),
            @ApiImplicitParam(name = Constants.PAGE_SIZE, value = "查询条件2", paramType = "query"),
            @ApiImplicitParam(name = Constants.ORDER_BY_FIELD, value = "查询条件3", paramType = "query"),
            @ApiImplicitParam(name = Constants.ORDER, value = "查询条件4", paramType = "query"),
    })
    //// @RequiresPermissions("${moduleName}:${pathName}:page")
    public Result<PageUtil<${className}Dto>> page(@ApiIgnore @RequestParam Map<String, Object> params) {
        PageUtil<${className}Dto> page = ${classname}Service.page(params);
        return Result.ok(page);
    }

    @GetMapping("/{id}")
    @ApiOperation("信息")
    //// @RequiresPermissions("${moduleName}:${pathName}:info")
    public Result<${className}Dto> get(@PathVariable("id") Long id) {
        ${className}Entity data = ${classname}Service.getById(id);
        ${className}Dto dto = ConvertUtils.sourceToTarget(data, ${className}Dto.class);
        return Result.ok(dto);
    }

    @PostMapping
    @ApiOperation("保存")
    // @LogOperation("保存")
    //// @RequiresPermissions("${moduleName}:${pathName}:save")
    public Result save(@RequestBody ${className}Dto dto) {
        //效验数据
        ${className}Entity data = ConvertUtils.sourceToTarget(dto, ${className}Entity.class);
        ${classname}Service.save(data);
        return Result.ok();
    }

    @PutMapping
    @ApiOperation("修改")
    // @LogOperation("修改")
    //// @RequiresPermissions("${moduleName}:${pathName}:update")
    public Result update(@RequestBody ${className}Dto dto) {
        //效验数据
        ${className}Entity data = ConvertUtils.sourceToTarget(dto, ${className}Entity.class);
        ${classname}Service.update(data);
        return Result.ok();
    }

    @PostMapping("saveOrUpdate")
    @ApiOperation("保存或修改")
    // @LogOperation("保存或修改")
    //// @RequiresPermissions("${moduleName}:${pathName}:saveOrUpdate")
    public Result saveOrUpdate(@RequestBody ${className}Dto dto) {
        if (dto.getId() == null) {
            save(dto);
        } else {
            update(dto);
        }
        return Result.ok();
    }

    @DeleteMapping
    @ApiOperation("删除")
    // @LogOperation("删除")
    //// @RequiresPermissions("${moduleName}:${pathName}:delete")
    public Result delete(@RequestBody Long[] ids) {
        //效验数据
        ${classname}Service.removeByIds(Collections.singletonList(ids));
        return Result.ok();
    }

    @GetMapping("export")
    @ApiOperation("导出")
    // @LogOperation("导出")
    // @RequiresPermissions("${moduleName}:${pathName}:export")
    public void export(@ApiIgnore @RequestParam Map<String, Object> params, HttpServletResponse response) throws Exception {
        List<${className}Entity> list = ${classname}Service.list(params);
        ExcelUtils.exportExcelToTarget(response, null, list, ${className}Excel.class);
    }

}
